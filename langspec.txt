
                        Retineo Gen 1 Language Specification

  // Single line comment

  /*
      Multi-line
      /* Nested */
      Comments
  */

  program IDENT

    enum [BASETYPE] IDENT
      [IDENT[, ...] ['=' CONSTEXPR]]
    end

    union IDENT
      [TYPESPEC IDENT[, ...]]
    end

    struct IDENT
      [TYPESPEC IDENT[, ...] [= CONSTEXPR]]
      [union '(' TYPESPEC[, ...] ')' IDENT[, ...]]
    end

    type TYPESPEC IDENT ['=' CONSTEXPR][, ...]

    type union '(' TYPESPEC[, ...] ')' IDENT ['=' '(' CONSTEXPR[, ...] ')'][,...];

    newtype TYPESPEC IDENT ['=' CONSTEXPR][, ...]

    const
      [TYPESPEC IDENT '=' CONSTEXPR[, ...]]
    end

    var
      [TYPESPEC IDENT['=' CONSTEXPR][, ...]]
    end

    funcdecl [CALLSPEC] [TYPESPEC] IDENT '(' [PARAMDECL[, ...]] ')'

    import func [CALLSPEC] [TYPESPEC] IDENT '(' [PARAMDECL[, ...]] ')'
      from DLLNAMESTR [as ACTUALNAMESTR]

    func [CALLSPEC] [TYPESPEC] IDENT '(' [PARAMDECL[, ...]] ')'
        ['=' CONSTEXPR]
      [var
        [TYPESPEC IDENT['=' CONSTEXPR][, ...]]
      end]

      [<STATEMENT | result ASSIGNOP EXPRESSION | return [EXPRESSION]>]
    end

    func asm [frame] [CALLSPEC] [TYPESPEC] IDENT '(' [PARAMDECL[, ...]] ')'
        ['=' CONSTEXPR]
      [var
        [TYPESPEC IDENT['=' CONSTEXPR][, ...]]
      end]

      [ASMSTATEMENT]
    end

    object IDENT
      [inherits OBJNAME[, ...]]
    [<public | mutable>]
      [inherit QUALIFIEDMEMBER as IDENT]
      [TYPESPEC IDENT['=' CONSTEXPR][, ...]]
    end

    ctor OBJNAME.IDENT '(' [MEMBERNAME[, ...]] ')'
      [var
        [TYPESPEC IDENT['=' CONSTEXPR][, ...]]
      end]

      [<STATEMENT | return>]
    end

    dtor OBJNAME '(' ')'
      [var
        [TYPESPEC IDENT['=' CONSTEXPR][, ...]]
      end]

      [<STATEMENT | return>]
    end

    abstract <OBJNAME | IDENT [implements OBJNAME[, ...]]>
        [inherits <ABSNAME | IFACENAME>[, ...]]
      [inherit QUALIFIEDMETHOD as IDENT]
      [method [CALLSPEC] [TYPESPEC] IDENT '(' [PARAMDECL[, ...]] ')']
    end

    interface <OBJNAME | IDENT [implements OBJNAME[, ...]]>
        [inherits <ABSNAME | IFACENAME>[, ...]]
      [inherit QUALIFIEDMETHOD as IDENT]
      [method [CALLSPEC] [TYPESPEC] IDENT '(' [PARAMDECL[, ...]] ')']
    end

    method [CALLSPEC] [TYPESPEC]
        <ABSNAME | IFACENAME>.METHODNAME '(' [PARAMDECL[, ...]] ')'
        ['=' CONSTEXPR]
      [var
        [TYPESPEC IDENT['=' CONSTEXPR][, ...]]
      end]

      [<STATEMENT | result ASSIGNOP EXPRESSION | return [EXPRESSION]>]
    end

    method asm [frame] [CALLSPEC] [TYPESPEC]
        <ABSNAME | IFACENAME>.METHODNAME '(' [PARAMDECL[, ...]] ')'
        ['=' CONSTEXPR]
      [var
        [TYPESPEC IDENT['=' CONSTEXPR][, ...]]
      end]

      [ASMSTATEMENT]
    end

  run
    [var
      [TYPESPEC IDENT['=' CONSTEXPR][, ...]]
    end]

    [STATEMENT]
  end

==========================================================================

---------
STATEMENT
---------

  STATEMENT until CONDITION

  if CONDITION
    then STATEMENT

  if CONDITION
    [thenif CONDITION]
    [STATEMENT]
  [elseif CONDITION
    [thenif CONDITION]
    [STATEMENT]]
  [else
    [STATEMENT]]
  endif

  case EXPRESSION
    [precase
      [var
        [TYPESPEC IDENT[= CONSTEXPR][, ...]]
      end]
      [<STATEMENT | return>]
    endpre]

    [postcase
      [var
        [TYPESPEC IDENT[= CONSTEXPR][, ...]]
      end]
      [<STATEMENT | return>]
    endpost]

    [of CONSTEXPR[..CONSTEXPR]
      [<STATEMENT | nextcase | exitcase>]]

    [in '[' CONSTEXPR[, ...] ']'
      [<STATEMENT | nextcase | exitcase>]]

    [default
      [STATEMENT]]
  endcase

  [IDENT:]for VARNAME in <BASETYPE | SETNAME | '[' CONSTEXPR[, ...] ']' >
    [<STATEMENT | next [LABELNAME] | break [LABELNAME]>]
  endfor

  [IDENT:]for VARNAME = EXPRESSION <to | downto> EXPRESSION
        [step CONSTEXPR]
    [<STATEMENT | next [LABELNAME] | break [LABELNAME]>]
  endfor

  [IDENT:]while CONDITION
    [<STATEMENT | next [LABELNAME] | break [LABELNAME]>]
  endwhile

  [IDENT:]repeat
    [<STATEMENT | next [LABELNAME] | break [LABELNAME]>]
  when CONDITION

  IDENT ':'

  goto LABELNAME

  VARNAME[<.FIELDNAME | .MEMBERNAME>] ASSIGNOP EXPRESSION

  FUNCNAME[.FIELDNAME] '(' [EXPRESSION[, ...]] ')'

  bind '(' OBJVAR, <ABSNAME | IFACENAME>[, ...] ')'

  OBJVAR.METHODNAME '(' [EXPRESSION[, ...]] ')'

  exit EXPRESSION

  ASMSTATEMENT
